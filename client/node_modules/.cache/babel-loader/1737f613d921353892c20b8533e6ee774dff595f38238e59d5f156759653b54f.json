{"ast":null,"code":"export default class Distances {\n  constructor(root) {\n    this.root = root;\n    this.cells = new Map();\n    this.set(this.root, 0);\n  }\n  at(cell) {\n    return this.cells.get(cell);\n  }\n  set(cell, distance) {\n    this.cells.set(cell, distance);\n  }\n  has(cell) {\n    return this.cells.has(cell);\n  }\n  pathTo(goal) {\n    let current = goal;\n    const breadcrumbs = new Distances(this.root);\n    breadcrumbs.set(current, this.at(current));\n    while (current !== this.root) {\n      for (const neighbor of current.links.keys()) {\n        if (this.at(neighbor) < this.at(current)) {\n          breadcrumbs.set(neighbor, this.at(neighbor));\n          current = neighbor;\n          break;\n        }\n      }\n    }\n    return breadcrumbs;\n  }\n  max() {\n    let maxDistance = 0;\n    let maxCell = this.root;\n    for (const [cell, distance] of this.cells.entries()) {\n      if (distance > maxDistance) {\n        maxCell = cell;\n        maxDistance = distance;\n      }\n    }\n    return [maxCell, maxDistance];\n  }\n}","map":{"version":3,"names":["Distances","constructor","root","cells","Map","set","at","cell","get","distance","has","pathTo","goal","current","breadcrumbs","neighbor","links","keys","max","maxDistance","maxCell","entries"],"sources":["/Users/danny/Documents/Software Engineering/laze/client/src/Classes/Distances.js"],"sourcesContent":["export default class Distances {\n  constructor(root) {\n    this.root = root;\n    this.cells = new Map();\n    this.set(this.root, 0);\n  }\n\n  at(cell) {\n    return this.cells.get(cell);\n  }\n\n  set(cell, distance) {\n    this.cells.set(cell, distance);\n  }\n\n  has(cell) {\n    return this.cells.has(cell);\n  }\n\n  pathTo(goal) {\n    let current = goal;\n    \n    const breadcrumbs = new Distances(this.root);\n    breadcrumbs.set(current, this.at(current));\n\n    while (current !== this.root) {\n      for (const neighbor of current.links.keys()) {\n        if (this.at(neighbor) < this.at(current)) {\n          breadcrumbs.set(neighbor, this.at(neighbor));\n          current = neighbor;\n          break;\n        }\n      }\n    }\n    return breadcrumbs;\n  }\n\n  max() {\n    let maxDistance = 0;\n    let maxCell = this.root;\n\n    for (const [cell, distance] of this.cells.entries()) {\n      if (distance > maxDistance) {\n        maxCell = cell;\n        maxDistance = distance;\n      }\n    }\n    return [maxCell, maxDistance];\n  }\n}"],"mappings":"AAAA,eAAe,MAAMA,SAAS,CAAC;EAC7BC,WAAW,CAACC,IAAI,EAAE;IAChB,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,KAAK,GAAG,IAAIC,GAAG,EAAE;IACtB,IAAI,CAACC,GAAG,CAAC,IAAI,CAACH,IAAI,EAAE,CAAC,CAAC;EACxB;EAEAI,EAAE,CAACC,IAAI,EAAE;IACP,OAAO,IAAI,CAACJ,KAAK,CAACK,GAAG,CAACD,IAAI,CAAC;EAC7B;EAEAF,GAAG,CAACE,IAAI,EAAEE,QAAQ,EAAE;IAClB,IAAI,CAACN,KAAK,CAACE,GAAG,CAACE,IAAI,EAAEE,QAAQ,CAAC;EAChC;EAEAC,GAAG,CAACH,IAAI,EAAE;IACR,OAAO,IAAI,CAACJ,KAAK,CAACO,GAAG,CAACH,IAAI,CAAC;EAC7B;EAEAI,MAAM,CAACC,IAAI,EAAE;IACX,IAAIC,OAAO,GAAGD,IAAI;IAElB,MAAME,WAAW,GAAG,IAAId,SAAS,CAAC,IAAI,CAACE,IAAI,CAAC;IAC5CY,WAAW,CAACT,GAAG,CAACQ,OAAO,EAAE,IAAI,CAACP,EAAE,CAACO,OAAO,CAAC,CAAC;IAE1C,OAAOA,OAAO,KAAK,IAAI,CAACX,IAAI,EAAE;MAC5B,KAAK,MAAMa,QAAQ,IAAIF,OAAO,CAACG,KAAK,CAACC,IAAI,EAAE,EAAE;QAC3C,IAAI,IAAI,CAACX,EAAE,CAACS,QAAQ,CAAC,GAAG,IAAI,CAACT,EAAE,CAACO,OAAO,CAAC,EAAE;UACxCC,WAAW,CAACT,GAAG,CAACU,QAAQ,EAAE,IAAI,CAACT,EAAE,CAACS,QAAQ,CAAC,CAAC;UAC5CF,OAAO,GAAGE,QAAQ;UAClB;QACF;MACF;IACF;IACA,OAAOD,WAAW;EACpB;EAEAI,GAAG,GAAG;IACJ,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,OAAO,GAAG,IAAI,CAAClB,IAAI;IAEvB,KAAK,MAAM,CAACK,IAAI,EAAEE,QAAQ,CAAC,IAAI,IAAI,CAACN,KAAK,CAACkB,OAAO,EAAE,EAAE;MACnD,IAAIZ,QAAQ,GAAGU,WAAW,EAAE;QAC1BC,OAAO,GAAGb,IAAI;QACdY,WAAW,GAAGV,QAAQ;MACxB;IACF;IACA,OAAO,CAACW,OAAO,EAAED,WAAW,CAAC;EAC/B;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}