{"ast":null,"code":"var _jsxFileName = \"/Users/danny/Documents/Software Engineering/laze/src/Components/CellVis.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { GlobalContext } from '../Context/GlobalState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Cell(_ref) {\n  _s();\n  let {\n    cell,\n    distance\n  } = _ref;\n  const {\n    solved,\n    path,\n    grid,\n    darkMode\n  } = useContext(GlobalContext);\n  const wallColor = darkMode ? 'var(--lightBlue)' : 'var(--darkBlue)';\n  const walls = {\n    borderLeft: `${cell.westWall ? `4px solid ${wallColor}` : '0'}`,\n    borderRight: `${cell.eastWall ? `4px solid ${wallColor}` : '0'}`,\n    borderTop: `${cell.northWall ? `4px solid ${wallColor}` : '0'}`,\n    borderBottom: `${cell.southWall ? `4px solid ${wallColor}` : '0'}`\n  };\n  const rgbGradient = offset => {\n    const light = {\n      red: Math.min(145 + offset * 1.8, 217),\n      green: Math.max(233 + offset * -1.425, 176),\n      blue: Math.max(242 + offset * -0.8, 210)\n    };\n    const dark = {\n      red: Math.min(176 + offset * 1, 217),\n      green: Math.min(118 + offset * 1.45, 176),\n      blue: Math.min(199 + offset * 0.275, 210)\n    };\n    return darkMode ? dark : light;\n  };\n  const pathOffset = path.get(cell) || 0;\n  const solutionOffset = +distance || 0;\n  let {\n    red,\n    green,\n    blue\n  } = rgbGradient(pathOffset);\n  const pathStyle = {\n    backgroundColor: `rgba(${red}, ${green}, ${blue}, ${+path.has(cell)})`\n  };\n  ({\n    red,\n    green,\n    blue\n  } = rgbGradient(solutionOffset));\n  const solutionBackground = {\n    backgroundColor: `rgba(${red}, ${green}, ${blue}, ${+distance})`,\n    height: `${1 / grid.rows * 100}%`,\n    width: `${1 / grid.columns * 100}%`,\n    borderRadius: '100%',\n    scale: '0.25',\n    opacity: `${+solved}`\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cell\",\n    style: walls,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pathBackground\",\n      style: pathStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"solutionBackground\",\n      style: solutionBackground\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(Cell, \"E3O9CmuHVfZMF8EkE436QtbLFms=\");\n_c = Cell;\n;\nvar _c;\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"names":["React","useContext","GlobalContext","Cell","cell","distance","solved","path","grid","darkMode","wallColor","walls","borderLeft","westWall","borderRight","eastWall","borderTop","northWall","borderBottom","southWall","rgbGradient","offset","light","red","Math","min","green","max","blue","dark","pathOffset","get","solutionOffset","pathStyle","backgroundColor","has","solutionBackground","height","rows","width","columns","borderRadius","scale","opacity"],"sources":["/Users/danny/Documents/Software Engineering/laze/src/Components/CellVis.jsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport { GlobalContext } from '../Context/GlobalState';\n\nexport default function Cell({ cell, distance }) {\n  const { solved, path, grid, darkMode } = useContext(GlobalContext)\n  const wallColor = darkMode ? 'var(--lightBlue)' : 'var(--darkBlue)'\n  const walls = {\n    borderLeft: `${cell.westWall ? `4px solid ${wallColor}` : '0'}`,\n    borderRight: `${cell.eastWall ? `4px solid ${wallColor}` : '0'}`,\n    borderTop: `${cell.northWall ? `4px solid ${wallColor}` : '0'}`,\n    borderBottom: `${cell.southWall ? `4px solid ${wallColor}` : '0'}`,\n  }\n\n  const rgbGradient = (offset) => {\n    const light = {\n      red: Math.min(145 + offset * 1.8, 217),\n      green: Math.max(233 + offset * -1.425, 176),\n      blue: Math.max(242 + offset * -0.8, 210),\n    };\n    const dark = {\n      red: Math.min(176 + offset * 1, 217),\n      green: Math.min(118 + offset * 1.45, 176),\n      blue: Math.min(199 + offset * 0.275, 210)\n  \n    }\n    return darkMode ? dark : light;\n  };\n\n  const pathOffset = path.get(cell) || 0;\n  const solutionOffset = +distance || 0;\n\n  let { red, green, blue } = rgbGradient(pathOffset);\n\n  const pathStyle = {\n    backgroundColor: `rgba(${red}, ${green}, ${blue}, ${+path.has(cell)})`,\n  };\n\n  ({ red, green, blue } = rgbGradient(solutionOffset));\n\n  const solutionBackground = {\n    backgroundColor: `rgba(${red}, ${green}, ${blue}, ${+distance})`,\n    height: `${1 / grid.rows * 100}%`,\n    width: `${1 / grid.columns * 100}%`,\n    borderRadius: '100%',\n    scale: '0.25',\n    opacity: `${+solved}`,\n  }\n\n\n  return (\n    <div className='cell' style={walls}>\n      <div className='pathBackground' style={pathStyle}></div>\n      <div className=\"solutionBackground\" style={solutionBackground}></div>\n    </div>\n  );\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}