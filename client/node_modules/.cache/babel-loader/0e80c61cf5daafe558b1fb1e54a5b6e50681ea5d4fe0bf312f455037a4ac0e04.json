{"ast":null,"code":"var _jsxFileName = \"/Users/danny/Documents/Software Engineering/laze/src/Context/GlobalState.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useReducer } from 'react';\nimport DistanceGrid from '../Classes/DistanceGrid';\nimport AppReducer from './AppReducer';\nimport Kruskals from '../Classes/Kruskals';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  grid: new DistanceGrid(15, 15),\n  path: new Map(),\n  position: null,\n  solved: false,\n  darkMode: false\n};\nconst {\n  grid,\n  path\n} = initialState;\nKruskals.on(grid);\ngrid.addWalls();\nconst start = grid.at(0, 0);\npath.set(start, 0);\ninitialState.position = start;\nconst distances = start.distances();\ngrid.distances = distances.pathTo(grid.at(grid.rows - 1, grid.columns - 1));\nexport const GlobalContext = /*#__PURE__*/createContext(initialState);\nexport const GlobalProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n  const generateMaze = (rows, columns) => {\n    dispatch({\n      type: 'GENERATE_MAZE',\n      payload: {\n        rows,\n        columns\n      }\n    });\n  };\n  const move = direction => {\n    dispatch({\n      type: 'MOVE',\n      payload: direction\n    });\n  };\n  const solve = () => {\n    dispatch({\n      type: 'SOLVE'\n    });\n  };\n  const toggleDarkMode = checked => {\n    dispatch({\n      type: 'TOGGLE_DARK_MODE',\n      payload: checked\n    });\n  };\n  const values = {\n    grid: state.grid,\n    path: state.path,\n    position: state.position,\n    solved: state.solved,\n    darkMode: state.darkMode,\n    generateMaze,\n    move,\n    solve,\n    toggleDarkMode\n  };\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: values,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(GlobalProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = GlobalProvider;\nvar _c;\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"names":["React","createContext","useReducer","DistanceGrid","AppReducer","Kruskals","initialState","grid","path","Map","position","solved","darkMode","on","addWalls","start","at","set","distances","pathTo","rows","columns","GlobalContext","GlobalProvider","children","state","dispatch","generateMaze","type","payload","move","direction","solve","toggleDarkMode","checked","values"],"sources":["/Users/danny/Documents/Software Engineering/laze/src/Context/GlobalState.js"],"sourcesContent":["import React, { createContext, useReducer } from 'react';\nimport DistanceGrid from '../Classes/DistanceGrid';\nimport AppReducer from './AppReducer'\nimport Kruskals from '../Classes/Kruskals';\n\nconst initialState = {\n  grid: new DistanceGrid(15, 15),\n  path: new Map(),\n  position: null,\n  solved: false,\n  darkMode: false,\n};\n\nconst { grid, path } = initialState;\nKruskals.on(grid);\ngrid.addWalls();\nconst start = grid.at(0, 0);\npath.set(start, 0);\ninitialState.position = start;\nconst distances = start.distances();\ngrid.distances = distances.pathTo(grid.at(grid.rows - 1, grid.columns - 1));\n\nexport const GlobalContext = createContext(initialState);\n\nexport const GlobalProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  const generateMaze = (rows, columns) => {\n    dispatch({\n      type: 'GENERATE_MAZE',\n      payload: { rows, columns },\n    })\n  };\n\n  const move = (direction) => {\n    dispatch({\n      type: 'MOVE',\n      payload: direction,\n    })\n  };\n\n  const solve = () => {\n    dispatch({\n      type: 'SOLVE',\n    })\n  };\n\n  const toggleDarkMode = (checked) => {\n    dispatch({\n      type: 'TOGGLE_DARK_MODE',\n      payload: checked,\n    })\n  }\n\n  const values = {\n    grid: state.grid,\n    path: state.path,\n    position: state.position,\n    solved: state.solved,\n    darkMode: state.darkMode,\n    generateMaze,\n    move,\n    solve,\n    toggleDarkMode\n  };\n\n  return (\n    <GlobalContext.Provider value={values}>\n      {children}\n    </GlobalContext.Provider>\n  )\n}\n\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACxD,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,QAAQ,MAAM,qBAAqB;AAAC;AAE3C,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,IAAIJ,YAAY,CAAC,EAAE,EAAE,EAAE,CAAC;EAC9BK,IAAI,EAAE,IAAIC,GAAG,EAAE;EACfC,QAAQ,EAAE,IAAI;EACdC,MAAM,EAAE,KAAK;EACbC,QAAQ,EAAE;AACZ,CAAC;AAED,MAAM;EAAEL,IAAI;EAAEC;AAAK,CAAC,GAAGF,YAAY;AACnCD,QAAQ,CAACQ,EAAE,CAACN,IAAI,CAAC;AACjBA,IAAI,CAACO,QAAQ,EAAE;AACf,MAAMC,KAAK,GAAGR,IAAI,CAACS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;AAC3BR,IAAI,CAACS,GAAG,CAACF,KAAK,EAAE,CAAC,CAAC;AAClBT,YAAY,CAACI,QAAQ,GAAGK,KAAK;AAC7B,MAAMG,SAAS,GAAGH,KAAK,CAACG,SAAS,EAAE;AACnCX,IAAI,CAACW,SAAS,GAAGA,SAAS,CAACC,MAAM,CAACZ,IAAI,CAACS,EAAE,CAACT,IAAI,CAACa,IAAI,GAAG,CAAC,EAAEb,IAAI,CAACc,OAAO,GAAG,CAAC,CAAC,CAAC;AAE3E,OAAO,MAAMC,aAAa,gBAAGrB,aAAa,CAACK,YAAY,CAAC;AAExD,OAAO,MAAMiB,cAAc,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EACzC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGxB,UAAU,CAACE,UAAU,EAAEE,YAAY,CAAC;EAE9D,MAAMqB,YAAY,GAAG,CAACP,IAAI,EAAEC,OAAO,KAAK;IACtCK,QAAQ,CAAC;MACPE,IAAI,EAAE,eAAe;MACrBC,OAAO,EAAE;QAAET,IAAI;QAAEC;MAAQ;IAC3B,CAAC,CAAC;EACJ,CAAC;EAED,MAAMS,IAAI,GAAIC,SAAS,IAAK;IAC1BL,QAAQ,CAAC;MACPE,IAAI,EAAE,MAAM;MACZC,OAAO,EAAEE;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,KAAK,GAAG,MAAM;IAClBN,QAAQ,CAAC;MACPE,IAAI,EAAE;IACR,CAAC,CAAC;EACJ,CAAC;EAED,MAAMK,cAAc,GAAIC,OAAO,IAAK;IAClCR,QAAQ,CAAC;MACPE,IAAI,EAAE,kBAAkB;MACxBC,OAAO,EAAEK;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,MAAM,GAAG;IACb5B,IAAI,EAAEkB,KAAK,CAAClB,IAAI;IAChBC,IAAI,EAAEiB,KAAK,CAACjB,IAAI;IAChBE,QAAQ,EAAEe,KAAK,CAACf,QAAQ;IACxBC,MAAM,EAAEc,KAAK,CAACd,MAAM;IACpBC,QAAQ,EAAEa,KAAK,CAACb,QAAQ;IACxBe,YAAY;IACZG,IAAI;IACJE,KAAK;IACLC;EACF,CAAC;EAED,oBACE,QAAC,aAAa,CAAC,QAAQ;IAAC,KAAK,EAAEE,MAAO;IAAA,UACnCX;EAAQ;IAAA;IAAA;IAAA;EAAA,QACc;AAE7B,CAAC;AAAA,GA/CYD,cAAc;AAAA,KAAdA,cAAc;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}