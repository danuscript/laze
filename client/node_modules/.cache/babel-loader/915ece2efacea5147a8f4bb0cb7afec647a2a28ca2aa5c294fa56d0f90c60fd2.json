{"ast":null,"code":"var _jsxFileName = \"/Users/danny/Documents/Software Engineering/laze/src/App.jsx\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport GridVis from './Components/GridVis';\nimport Button from './Components/Button';\nimport { GlobalContext, GlobalProvider } from './Context/GlobalState';\nimport React, { useContext, useEffect } from 'react';\nimport Toggle from './Components/Toggle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(GlobalProvider, {\n    children: /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n_c = App;\nconst directions = {\n  Up: 'north',\n  Down: 'south',\n  Left: 'west',\n  Right: 'east'\n};\nconst Main = () => {\n  _s();\n  const {\n    grid,\n    generateMaze,\n    move,\n    position,\n    darkMode,\n    solve,\n    toggleDarkMode\n  } = useContext(GlobalContext);\n  useEffect(() => {\n    const handleKey = _ref => {\n      let {\n        key\n      } = _ref;\n      if (key.includes('Arrow')) {\n        const direction = key.slice(5);\n        move(directions[direction]);\n      }\n    };\n    window.addEventListener('keydown', handleKey);\n    return () => {\n      window.removeEventListener('keydown', handleKey);\n    };\n  });\n  useEffect(() => {\n    if (position === grid.at(grid.rows - 1, grid.columns - 1)) {\n      solve(true);\n    }\n  }, [position]);\n  const onChange = mode => toggleDarkMode(mode);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      color: darkMode ? 'var(--lightBlue)' : 'var(--darkBlue)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"twoPlayerButton\",\n        children: \"1P | 2P\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"LAZE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Toggle, {\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GridVis, {\n      grid: grid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttonTray\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        label: \"new maze\",\n        onClick: () => generateMaze(15, 15)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"solve maze\",\n        onClick: () => solve(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(Main, \"Y8rNpAjJDRPn7Jwtk1WpaMMxSxk=\");\n_c2 = Main;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Main\");","map":{"version":3,"names":["GridVis","Button","GlobalContext","GlobalProvider","React","useContext","useEffect","Toggle","App","directions","Up","Down","Left","Right","Main","grid","generateMaze","move","position","darkMode","solve","toggleDarkMode","handleKey","key","includes","direction","slice","window","addEventListener","removeEventListener","at","rows","columns","onChange","mode","color"],"sources":["/Users/danny/Documents/Software Engineering/laze/src/App.jsx"],"sourcesContent":["import './App.css';\nimport GridVis from './Components/GridVis';\nimport Button from './Components/Button';\nimport { GlobalContext, GlobalProvider } from './Context/GlobalState';\nimport React, { useContext, useEffect } from 'react';\nimport Toggle from './Components/Toggle';\n\nconst App = () => {\n  return (\n    <GlobalProvider>\n      <Main />\n    </GlobalProvider>\n  )\n}\n\nconst directions = { Up: 'north', Down: 'south', Left: 'west', Right: 'east' };\n\nconst Main = () => {\n  const { grid, generateMaze, move, position, darkMode, solve, toggleDarkMode } = useContext(GlobalContext);\n\n  useEffect(() => {\n    const handleKey = ({ key }) => {\n      if (key.includes('Arrow')) {\n        const direction = key.slice(5);\n        move(directions[direction]);\n      }\n    };\n\n    window.addEventListener('keydown', handleKey);\n\n    return () => {\n      window.removeEventListener('keydown', handleKey);\n    };\n  });\n\n  useEffect(() => {\n    if (position === grid.at(grid.rows - 1, grid.columns - 1)) {\n      solve(true);\n    }\n  }, [position]);\n\n  const onChange = (mode) => toggleDarkMode(mode);\n\n  return (\n    <div className='App' style={{color: darkMode ? 'var(--lightBlue)' : 'var(--darkBlue)'}}>\n      <div className='header'>\n        <div className='twoPlayerButton'>1P | 2P</div>\n        <h1 className='title'>LAZE</h1>\n        <Toggle onChange={onChange} />\n      </div>\n      <GridVis grid={grid} />\n      <div className='buttonTray'>\n        <Button label='new maze' onClick={() => generateMaze(15, 15)} />\n        <Button label='solve maze' onClick={() => solve(false)} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,MAAM,MAAM,qBAAqB;AACxC,SAASC,aAAa,EAAEC,cAAc,QAAQ,uBAAuB;AACrE,OAAOC,KAAK,IAAIC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AACpD,OAAOC,MAAM,MAAM,qBAAqB;AAAC;AAEzC,MAAMC,GAAG,GAAG,MAAM;EAChB,oBACE,QAAC,cAAc;IAAA,uBACb,QAAC,IAAI;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QACO;AAErB,CAAC;AAAA,KANKA,GAAG;AAQT,MAAMC,UAAU,GAAG;EAAEC,EAAE,EAAE,OAAO;EAAEC,IAAI,EAAE,OAAO;EAAEC,IAAI,EAAE,MAAM;EAAEC,KAAK,EAAE;AAAO,CAAC;AAE9E,MAAMC,IAAI,GAAG,MAAM;EAAA;EACjB,MAAM;IAAEC,IAAI;IAAEC,YAAY;IAAEC,IAAI;IAAEC,QAAQ;IAAEC,QAAQ;IAAEC,KAAK;IAAEC;EAAe,CAAC,GAAGhB,UAAU,CAACH,aAAa,CAAC;EAEzGI,SAAS,CAAC,MAAM;IACd,MAAMgB,SAAS,GAAG,QAAa;MAAA,IAAZ;QAAEC;MAAI,CAAC;MACxB,IAAIA,GAAG,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;QACzB,MAAMC,SAAS,GAAGF,GAAG,CAACG,KAAK,CAAC,CAAC,CAAC;QAC9BT,IAAI,CAACR,UAAU,CAACgB,SAAS,CAAC,CAAC;MAC7B;IACF,CAAC;IAEDE,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEN,SAAS,CAAC;IAE7C,OAAO,MAAM;MACXK,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEP,SAAS,CAAC;IAClD,CAAC;EACH,CAAC,CAAC;EAEFhB,SAAS,CAAC,MAAM;IACd,IAAIY,QAAQ,KAAKH,IAAI,CAACe,EAAE,CAACf,IAAI,CAACgB,IAAI,GAAG,CAAC,EAAEhB,IAAI,CAACiB,OAAO,GAAG,CAAC,CAAC,EAAE;MACzDZ,KAAK,CAAC,IAAI,CAAC;IACb;EACF,CAAC,EAAE,CAACF,QAAQ,CAAC,CAAC;EAEd,MAAMe,QAAQ,GAAIC,IAAI,IAAKb,cAAc,CAACa,IAAI,CAAC;EAE/C,oBACE;IAAK,SAAS,EAAC,KAAK;IAAC,KAAK,EAAE;MAACC,KAAK,EAAEhB,QAAQ,GAAG,kBAAkB,GAAG;IAAiB,CAAE;IAAA,wBACrF;MAAK,SAAS,EAAC,QAAQ;MAAA,wBACrB;QAAK,SAAS,EAAC,iBAAiB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAc,eAC9C;QAAI,SAAS,EAAC,OAAO;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAU,eAC/B,QAAC,MAAM;QAAC,QAAQ,EAAEc;MAAS;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QAC1B,eACN,QAAC,OAAO;MAAC,IAAI,EAAElB;IAAK;MAAA;MAAA;MAAA;IAAA,QAAG,eACvB;MAAK,SAAS,EAAC,YAAY;MAAA,wBACzB,QAAC,MAAM;QAAC,KAAK,EAAC,UAAU;QAAC,OAAO,EAAE,MAAMC,YAAY,CAAC,EAAE,EAAE,EAAE;MAAE;QAAA;QAAA;QAAA;MAAA,QAAG,eAChE,QAAC,MAAM;QAAC,KAAK,EAAC,YAAY;QAAC,OAAO,EAAE,MAAMI,KAAK,CAAC,KAAK;MAAE;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QACtD;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEV,CAAC;AAAA,GAxCKN,IAAI;AAAA,MAAJA,IAAI;AA0CV,eAAeN,GAAG;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}