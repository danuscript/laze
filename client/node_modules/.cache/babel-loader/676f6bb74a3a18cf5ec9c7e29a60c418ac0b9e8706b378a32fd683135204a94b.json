{"ast":null,"code":"import Cell from \"./Cell\";\nexport default class Grid {\n  constructor(rows, columns) {\n    this.rows = rows;\n    this.columns = columns;\n    this.grid = this.prepareGrid();\n    this.configureCells();\n  }\n  prepareGrid() {\n    return new Array(this.rows).fill(0).map((_, row) => new Array(this.columns).fill(0).map((__, column) => new Cell(row, column)));\n  }\n  configureCells() {\n    for (const cell of this.eachCell()) {\n      const {\n        row,\n        column\n      } = cell;\n      cell.north = this.at(row - 1, column);\n      cell.south = this.at(row + 1, column);\n      cell.west = this.at(row, column - 1);\n      cell.east = this.at(row, column + 1);\n    }\n  }\n  *eachCell() {\n    for (const row of this.grid) {\n      for (const cell of row) {\n        if (cell) yield cell;\n      }\n    }\n  }\n  *eachRow() {\n    for (const row of this.grid) {\n      yield row;\n    }\n  }\n  at(row, column) {\n    if (row < 0 || row >= this.rows || column < 0 || column >= this.columns) return null;\n    return this.grid[row][column];\n  }\n  randomCell() {\n    const row = Math.floor(Math.random() * this.rows);\n    const column = Math.floor(Math.random() * this.columns);\n    return this.at(row, column);\n  }\n  toString() {\n    let output = `+${'---+'.repeat(this.columns)}\\n`;\n    for (const row of this.eachRow()) {\n      let top = '|';\n      let bottom = '+';\n      for (let cell of row) {\n        if (!cell) cell = new Cell(-1, -1);\n        const body = ` ${this.contentsOf(cell)} `;\n        const eastBoundary = cell.linked(cell.east) ? ' ' : '|';\n        top += `${body}${eastBoundary}`;\n        const southBoundary = cell.linked(cell.south) ? '   ' : '---';\n        const corner = '+';\n        bottom += `${southBoundary}${corner}`;\n      }\n      output += `${top}\\n${bottom}\\n`;\n    }\n    return output;\n  }\n  addWalls() {\n    for (let cell of this.eachCell()) {\n      if (!cell) cell = new Cell(-1, -1);\n      if (!cell.row) cell.northWall = true;\n      if (!cell.column) cell.westWall = true;\n      if (!cell.linked(cell.east)) cell.eastWall = true;\n      if (!cell.linked(cell.south)) cell.southWall = true;\n    }\n  }\n  get size() {\n    return this.rows * this.columns;\n  }\n  contentsOf(cell) {\n    return ' ';\n  }\n}","map":{"version":3,"names":["Cell","Grid","constructor","rows","columns","grid","prepareGrid","configureCells","Array","fill","map","_","row","__","column","cell","eachCell","north","at","south","west","east","eachRow","randomCell","Math","floor","random","toString","output","repeat","top","bottom","body","contentsOf","eastBoundary","linked","southBoundary","corner","addWalls","northWall","westWall","eastWall","southWall","size"],"sources":["/Users/danny/Documents/Software Engineering/laze/src/Classes/Grid.js"],"sourcesContent":["import Cell from \"./Cell\";\n\nexport default class Grid {\n  constructor(rows, columns) {\n    this.rows = rows;\n    this.columns = columns;\n    this.grid = this.prepareGrid();\n    this.configureCells();\n  }\n\n  prepareGrid() {\n    return new Array(this.rows).fill(0).map((_, row) => (\n      new Array(this.columns).fill(0).map((__, column) => (\n        new Cell(row, column)\n      ))\n    ));\n  }\n\n  configureCells() {\n    for (const cell of this.eachCell()) {\n      const { row, column } = cell;\n      cell.north = this.at(row - 1, column);\n      cell.south = this.at(row + 1, column);\n      cell.west = this.at(row, column - 1);\n      cell.east = this.at(row, column + 1);\n    }\n  }\n\n  * eachCell() {\n    for (const row of this.grid) {\n      for (const cell of row) {\n        if (cell) yield cell;\n      }\n    }\n  }\n\n  * eachRow() {\n    for (const row of this.grid) {\n      yield row;\n    }\n  }\n\n  at(row, column) {\n    if (row < 0 || row >= this.rows || column < 0 || column >= this.columns) return null;\n    return this.grid[row][column];\n  }\n\n  randomCell() {\n    const row = Math.floor(Math.random() * this.rows);\n    const column = Math.floor(Math.random() * this.columns);\n    return this.at(row, column);\n  }\n\n  toString() {\n    let output = `+${'---+'.repeat(this.columns)}\\n`;\n    for (const row of this.eachRow()) {\n      let top = '|';\n      let bottom = '+';\n\n      for (let cell of row) {\n        if (!cell) cell = new Cell(-1, -1);\n\n        const body = ` ${this.contentsOf(cell)} `;\n        const eastBoundary = (cell.linked(cell.east) ? ' ' : '|');\n        top += `${body}${eastBoundary}`;\n\n        const southBoundary = (cell.linked(cell.south) ? '   ' : '---');\n        const corner = '+';\n        bottom += `${southBoundary}${corner}`;\n      }\n      output += `${top}\\n${bottom}\\n`;\n    }\n    return output;\n  }\n\n  addWalls() {\n    for (let cell of this.eachCell()) {\n      if (!cell) cell = new Cell(-1, -1);\n\n      if (!cell.row) cell.northWall = true;\n      if (!cell.column) cell.westWall = true;\n      if (!cell.linked(cell.east)) cell.eastWall = true;\n      if (!cell.linked(cell.south)) cell.southWall = true;\n    }\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  contentsOf(cell) {\n    return ' ';\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}