{"ast":null,"code":"import Kruskals from '../Classes/Kruskals';\nimport DistanceGrid from '../Classes/DistanceGrid';\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case 'GENERATE_MAZE':\n      {\n        const {\n          rows,\n          columns\n        } = action.payload;\n        const newState = {\n          grid: new DistanceGrid(rows, columns),\n          path: new Map(),\n          position: null,\n          solved: false\n        };\n        const {\n          grid,\n          path\n        } = newState;\n        Kruskals.on(grid);\n        grid.addWalls();\n        const start = grid.at(0, 0);\n        path.set(start, 0);\n        newState.position = start;\n        const distances = start.distances();\n        grid.distances = distances.pathTo(grid.at(grid.rows - 1, grid.columns - 1));\n        return {\n          ...state,\n          ...newState\n        };\n      }\n    case 'MOVE':\n      {\n        let direction = action.payload;\n        let {\n          solved,\n          path,\n          position\n        } = state;\n        if (solved) return state;\n        const next = position[direction];\n        if (position.linked(next) && path.has(next)) {\n          path.delete(position);\n          position = next;\n        } else if (next && position.linked(next)) {\n          path.set(next, path.size);\n          position = next;\n        }\n        return {\n          ...state,\n          path,\n          position\n        };\n      }\n    case 'SOLVE':\n      {\n        return {\n          ...state,\n          solved: true\n        };\n      }\n    case 'TOGGLE_DARK_MODE':\n      {\n        const mode = action.payload ? 'dark' : 'light';\n        document.body.style.backgroundColor = `var(--${mode}Gray)`;\n        return {\n          ...state,\n          darkMode: action.payload\n        };\n      }\n    case 'CHANGE_MODE':\n      {\n        console.log(action.payload);\n        return {\n          ...state,\n          players: action.payload\n        };\n      }\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["Kruskals","DistanceGrid","reducer","state","action","type","rows","columns","payload","newState","grid","path","Map","position","solved","on","addWalls","start","at","set","distances","pathTo","direction","next","linked","has","delete","size","mode","document","body","style","backgroundColor","darkMode","console","log","players"],"sources":["/Users/danny/Documents/Software Engineering/laze/client/src/Context/AppReducer.js"],"sourcesContent":["import Kruskals from '../Classes/Kruskals';\nimport DistanceGrid from '../Classes/DistanceGrid';\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case 'GENERATE_MAZE': {\n      const { rows, columns } = action.payload;\n      const newState = {\n        grid: new DistanceGrid(rows, columns),\n        path: new Map(),\n        position: null,\n        solved: false,\n      };\n\n      const { grid, path } = newState;\n      Kruskals.on(grid);\n      grid.addWalls();\n      const start = grid.at(0, 0);\n      path.set(start, 0);\n      newState.position = start;\n      const distances = start.distances();\n      grid.distances = distances.pathTo(grid.at(grid.rows - 1, grid.columns - 1));\n\n      return { ...state, ...newState};\n    }\n\n    case 'MOVE': {\n      let direction = action.payload;\n      let { solved, path, position } = state;\n      if (solved) return state;\n      const next = position[direction];\n      if (position.linked(next) && path.has(next)) {\n        path.delete(position);\n        position = next;\n      } else if (next && position.linked(next)) {\n        path.set(next, path.size)\n        position = next\n      }\n      return { ...state, path, position };\n    }\n\n    case 'SOLVE': {\n      return { ...state, solved: true };\n    }\n\n    case 'TOGGLE_DARK_MODE': {\n      const mode = action.payload ? 'dark' : 'light';\n      document.body.style.backgroundColor = `var(--${mode}Gray)`;\n      return { ...state, darkMode: action.payload }\n    }\n    \n    case 'CHANGE_MODE': {\n      console.log(action.payload);\n      return { ...state, players: action.payload };\n    }\n\n    default: return state;\n  }\n}"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,qBAAqB;AAC1C,OAAOC,YAAY,MAAM,yBAAyB;AAElD,eAAe,SAASC,OAAO,CAACC,KAAK,EAAEC,MAAM,EAAE;EAC7C,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,eAAe;MAAE;QACpB,MAAM;UAAEC,IAAI;UAAEC;QAAQ,CAAC,GAAGH,MAAM,CAACI,OAAO;QACxC,MAAMC,QAAQ,GAAG;UACfC,IAAI,EAAE,IAAIT,YAAY,CAACK,IAAI,EAAEC,OAAO,CAAC;UACrCI,IAAI,EAAE,IAAIC,GAAG,EAAE;UACfC,QAAQ,EAAE,IAAI;UACdC,MAAM,EAAE;QACV,CAAC;QAED,MAAM;UAAEJ,IAAI;UAAEC;QAAK,CAAC,GAAGF,QAAQ;QAC/BT,QAAQ,CAACe,EAAE,CAACL,IAAI,CAAC;QACjBA,IAAI,CAACM,QAAQ,EAAE;QACf,MAAMC,KAAK,GAAGP,IAAI,CAACQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QAC3BP,IAAI,CAACQ,GAAG,CAACF,KAAK,EAAE,CAAC,CAAC;QAClBR,QAAQ,CAACI,QAAQ,GAAGI,KAAK;QACzB,MAAMG,SAAS,GAAGH,KAAK,CAACG,SAAS,EAAE;QACnCV,IAAI,CAACU,SAAS,GAAGA,SAAS,CAACC,MAAM,CAACX,IAAI,CAACQ,EAAE,CAACR,IAAI,CAACJ,IAAI,GAAG,CAAC,EAAEI,IAAI,CAACH,OAAO,GAAG,CAAC,CAAC,CAAC;QAE3E,OAAO;UAAE,GAAGJ,KAAK;UAAE,GAAGM;QAAQ,CAAC;MACjC;IAEA,KAAK,MAAM;MAAE;QACX,IAAIa,SAAS,GAAGlB,MAAM,CAACI,OAAO;QAC9B,IAAI;UAAEM,MAAM;UAAEH,IAAI;UAAEE;QAAS,CAAC,GAAGV,KAAK;QACtC,IAAIW,MAAM,EAAE,OAAOX,KAAK;QACxB,MAAMoB,IAAI,GAAGV,QAAQ,CAACS,SAAS,CAAC;QAChC,IAAIT,QAAQ,CAACW,MAAM,CAACD,IAAI,CAAC,IAAIZ,IAAI,CAACc,GAAG,CAACF,IAAI,CAAC,EAAE;UAC3CZ,IAAI,CAACe,MAAM,CAACb,QAAQ,CAAC;UACrBA,QAAQ,GAAGU,IAAI;QACjB,CAAC,MAAM,IAAIA,IAAI,IAAIV,QAAQ,CAACW,MAAM,CAACD,IAAI,CAAC,EAAE;UACxCZ,IAAI,CAACQ,GAAG,CAACI,IAAI,EAAEZ,IAAI,CAACgB,IAAI,CAAC;UACzBd,QAAQ,GAAGU,IAAI;QACjB;QACA,OAAO;UAAE,GAAGpB,KAAK;UAAEQ,IAAI;UAAEE;QAAS,CAAC;MACrC;IAEA,KAAK,OAAO;MAAE;QACZ,OAAO;UAAE,GAAGV,KAAK;UAAEW,MAAM,EAAE;QAAK,CAAC;MACnC;IAEA,KAAK,kBAAkB;MAAE;QACvB,MAAMc,IAAI,GAAGxB,MAAM,CAACI,OAAO,GAAG,MAAM,GAAG,OAAO;QAC9CqB,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAI,SAAQJ,IAAK,OAAM;QAC1D,OAAO;UAAE,GAAGzB,KAAK;UAAE8B,QAAQ,EAAE7B,MAAM,CAACI;QAAQ,CAAC;MAC/C;IAEA,KAAK,aAAa;MAAE;QAClB0B,OAAO,CAACC,GAAG,CAAC/B,MAAM,CAACI,OAAO,CAAC;QAC3B,OAAO;UAAE,GAAGL,KAAK;UAAEiC,OAAO,EAAEhC,MAAM,CAACI;QAAQ,CAAC;MAC9C;IAEA;MAAS,OAAOL,KAAK;EAAC;AAE1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}