{"ast":null,"code":"var _jsxFileName = \"/Users/danny/Documents/Software Engineering/laze/src/Components/CellVis.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { GlobalContext } from '../Context/GlobalState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Cell(_ref) {\n  _s();\n  let {\n    cell,\n    distance\n  } = _ref;\n  const {\n    solved,\n    path,\n    grid\n  } = useContext(GlobalContext);\n  const walls = {\n    borderLeft: `${cell.westWall ? '4px solid var(--darkBlue)' : '0'}`,\n    borderRight: `${cell.eastWall ? '4px solid var(--darkBlue)' : '0'}`,\n    borderTop: `${cell.northWall ? '4px solid var(--darkBlue)' : '0'}`,\n    borderBottom: `${cell.southWall ? '4px solid var(--darkBlue)' : '0'}`\n  };\n  const pathOffset = path.get(cell) || 0;\n  const solutionOffset = +distance || 0;\n  let {\n    red,\n    green,\n    blue\n  } = rgbGradient(pathOffset);\n  const pathStyle = {\n    backgroundColor: `rgba(${red}, ${green}, ${blue}, ${+path.has(cell)})`\n  };\n  ({\n    red,\n    green,\n    blue\n  } = rgbGradient(solutionOffset));\n  const solutionBackground = {\n    backgroundColor: `rgba(${red}, ${green}, ${blue}, ${+distance})`,\n    height: `${1 / grid.rows * 100}%`,\n    width: `${1 / grid.columns * 100}%`,\n    borderRadius: '100%',\n    scale: '0.25',\n    opacity: `${+solved}`\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cell\",\n    style: walls,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pathBackground\",\n      style: pathStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"solutionBackground\",\n      style: solutionBackground\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(Cell, \"0z3i4DkicRE2POYJXZ66OnV3+0Q=\");\n_c = Cell;\n;\nconst rgbGradient = offset => ({\n  red: Math.min(145 + offset * 1.8, 217),\n  green: Math.max(233 + offset * -1.425, 176),\n  blue: Math.max(242 + offset * -0.8, 210)\n});\nvar _c;\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"names":["React","useContext","GlobalContext","Cell","cell","distance","solved","path","grid","walls","borderLeft","westWall","borderRight","eastWall","borderTop","northWall","borderBottom","southWall","pathOffset","get","solutionOffset","red","green","blue","rgbGradient","pathStyle","backgroundColor","has","solutionBackground","height","rows","width","columns","borderRadius","scale","opacity","offset","Math","min","max"],"sources":["/Users/danny/Documents/Software Engineering/laze/src/Components/CellVis.jsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport { GlobalContext } from '../Context/GlobalState';\n\nexport default function Cell({ cell, distance }) {\n  const { solved, path, grid } = useContext(GlobalContext)\n  const walls = {\n    borderLeft: `${cell.westWall ? '4px solid var(--darkBlue)' : '0'}`,\n    borderRight: `${cell.eastWall ? '4px solid var(--darkBlue)' : '0'}`,\n    borderTop: `${cell.northWall ? '4px solid var(--darkBlue)' : '0'}`,\n    borderBottom: `${cell.southWall ? '4px solid var(--darkBlue)' : '0'}`,\n  }\n\n  const pathOffset = path.get(cell) || 0;\n  const solutionOffset = +distance || 0;\n\n  let { red, green, blue } = rgbGradient(pathOffset);\n\n  const pathStyle = {\n    backgroundColor: `rgba(${red}, ${green}, ${blue}, ${+path.has(cell)})`,\n  };\n\n  ({ red, green, blue } = rgbGradient(solutionOffset));\n\n  const solutionBackground = {\n    backgroundColor: `rgba(${red}, ${green}, ${blue}, ${+distance})`,\n    height: `${1 / grid.rows * 100}%`,\n    width: `${1 / grid.columns * 100}%`,\n    borderRadius: '100%',\n    scale: '0.25',\n    opacity: `${+solved}`,\n  }\n\n  return (\n    <div className='cell' style={walls}>\n      <div className='pathBackground' style={pathStyle}></div>\n      <div className=\"solutionBackground\" style={solutionBackground}></div>\n    </div>\n  );\n};\n\nconst rgbGradient = (offset) => ({\n  red: Math.min(145 + offset * 1.8, 217),\n  green: Math.max(233 + offset * -1.425, 176),\n  blue: Math.max(242 + offset * -0.8, 210),\n});"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,aAAa,QAAQ,wBAAwB;AAAC;AAEvD,eAAe,SAASC,IAAI,OAAqB;EAAA;EAAA,IAApB;IAAEC,IAAI;IAAEC;EAAS,CAAC;EAC7C,MAAM;IAAEC,MAAM;IAAEC,IAAI;IAAEC;EAAK,CAAC,GAAGP,UAAU,CAACC,aAAa,CAAC;EACxD,MAAMO,KAAK,GAAG;IACZC,UAAU,EAAG,GAAEN,IAAI,CAACO,QAAQ,GAAG,2BAA2B,GAAG,GAAI,EAAC;IAClEC,WAAW,EAAG,GAAER,IAAI,CAACS,QAAQ,GAAG,2BAA2B,GAAG,GAAI,EAAC;IACnEC,SAAS,EAAG,GAAEV,IAAI,CAACW,SAAS,GAAG,2BAA2B,GAAG,GAAI,EAAC;IAClEC,YAAY,EAAG,GAAEZ,IAAI,CAACa,SAAS,GAAG,2BAA2B,GAAG,GAAI;EACtE,CAAC;EAED,MAAMC,UAAU,GAAGX,IAAI,CAACY,GAAG,CAACf,IAAI,CAAC,IAAI,CAAC;EACtC,MAAMgB,cAAc,GAAG,CAACf,QAAQ,IAAI,CAAC;EAErC,IAAI;IAAEgB,GAAG;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGC,WAAW,CAACN,UAAU,CAAC;EAElD,MAAMO,SAAS,GAAG;IAChBC,eAAe,EAAG,QAAOL,GAAI,KAAIC,KAAM,KAAIC,IAAK,KAAI,CAAChB,IAAI,CAACoB,GAAG,CAACvB,IAAI,CAAE;EACtE,CAAC;EAED,CAAC;IAAEiB,GAAG;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGC,WAAW,CAACJ,cAAc,CAAC;EAEnD,MAAMQ,kBAAkB,GAAG;IACzBF,eAAe,EAAG,QAAOL,GAAI,KAAIC,KAAM,KAAIC,IAAK,KAAI,CAAClB,QAAS,GAAE;IAChEwB,MAAM,EAAG,GAAE,CAAC,GAAGrB,IAAI,CAACsB,IAAI,GAAG,GAAI,GAAE;IACjCC,KAAK,EAAG,GAAE,CAAC,GAAGvB,IAAI,CAACwB,OAAO,GAAG,GAAI,GAAE;IACnCC,YAAY,EAAE,MAAM;IACpBC,KAAK,EAAE,MAAM;IACbC,OAAO,EAAG,GAAE,CAAC7B,MAAO;EACtB,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,MAAM;IAAC,KAAK,EAAEG,KAAM;IAAA,wBACjC;MAAK,SAAS,EAAC,gBAAgB;MAAC,KAAK,EAAEgB;IAAU;MAAA;MAAA;MAAA;IAAA,QAAO,eACxD;MAAK,SAAS,EAAC,oBAAoB;MAAC,KAAK,EAAEG;IAAmB;MAAA;MAAA;MAAA;IAAA,QAAO;EAAA;IAAA;IAAA;IAAA;EAAA,QACjE;AAEV;AAAC,GAnCuBzB,IAAI;AAAA,KAAJA,IAAI;AAmC3B;AAED,MAAMqB,WAAW,GAAIY,MAAM,KAAM;EAC/Bf,GAAG,EAAEgB,IAAI,CAACC,GAAG,CAAC,GAAG,GAAGF,MAAM,GAAG,GAAG,EAAE,GAAG,CAAC;EACtCd,KAAK,EAAEe,IAAI,CAACE,GAAG,CAAC,GAAG,GAAGH,MAAM,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC;EAC3Cb,IAAI,EAAEc,IAAI,CAACE,GAAG,CAAC,GAAG,GAAGH,MAAM,GAAG,CAAC,GAAG,EAAE,GAAG;AACzC,CAAC,CAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}