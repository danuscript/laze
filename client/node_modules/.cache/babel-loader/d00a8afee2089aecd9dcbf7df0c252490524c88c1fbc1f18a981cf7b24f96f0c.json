{"ast":null,"code":"export default class KruskalState {\n  constructor(grid) {\n    this.grid = grid;\n    this.neighbors = [];\n    this.setForCell = new Map();\n    this.cellsInSet = new Map();\n    for (const cell of grid.eachCell()) {\n      const set = this.setForCell.size;\n      this.setForCell.set(cell, set);\n      this.cellsInSet.set(set, [cell]);\n      if (cell.south) this.neighbors.push([cell, cell.south]);\n      if (cell.east) this.neighbors.push([cell, cell.east]);\n    }\n  }\n  canMerge(left, right) {\n    return this.setForCell.get(left) !== this.setForCell.get(right);\n  }\n  merge(left, right) {\n    left.link(right);\n    const winner = this.setForCell.get(left);\n    const loser = this.setForCell.get(right);\n    const losers = this.cellsInSet.get(loser) || [right];\n    for (const cell of losers) {\n      this.cellsInSet.get(winner).push(cell);\n      this.setForCell.set(cell, winner);\n    }\n    this.cellsInSet.delete(loser);\n  }\n}","map":{"version":3,"names":["KruskalState","constructor","grid","neighbors","setForCell","Map","cellsInSet","cell","eachCell","set","size","south","push","east","canMerge","left","right","get","merge","link","winner","loser","losers","delete"],"sources":["/Users/danny/Documents/Software Engineering/laze/client/src/Classes/KruskalState.js"],"sourcesContent":["export default class KruskalState {\n  constructor(grid) {\n    this.grid = grid;\n    this.neighbors = [];\n    this.setForCell = new Map();\n    this.cellsInSet = new Map();\n\n    for (const cell of grid.eachCell()) {\n      const set = this.setForCell.size;\n      this.setForCell.set(cell, set);\n      this.cellsInSet.set(set, [cell]);\n\n      if (cell.south) this.neighbors.push([cell, cell.south]);\n      if (cell.east) this.neighbors.push([cell, cell.east]);\n    }\n  }\n\n  canMerge(left, right) {\n    return this.setForCell.get(left) !== this.setForCell.get(right);\n  }\n\n  merge(left, right) {\n    left.link(right);\n\n    const winner = this.setForCell.get(left);\n    const loser = this.setForCell.get(right);\n    const losers = this.cellsInSet.get(loser) || [right];\n\n    for (const cell of losers) {\n      this.cellsInSet.get(winner).push(cell);\n      this.setForCell.set(cell, winner);\n    }\n\n    this.cellsInSet.delete(loser);\n  }\n}"],"mappings":"AAAA,eAAe,MAAMA,YAAY,CAAC;EAChCC,WAAW,CAACC,IAAI,EAAE;IAChB,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB,IAAI,CAACC,UAAU,GAAG,IAAIC,GAAG,EAAE;IAC3B,IAAI,CAACC,UAAU,GAAG,IAAID,GAAG,EAAE;IAE3B,KAAK,MAAME,IAAI,IAAIL,IAAI,CAACM,QAAQ,EAAE,EAAE;MAClC,MAAMC,GAAG,GAAG,IAAI,CAACL,UAAU,CAACM,IAAI;MAChC,IAAI,CAACN,UAAU,CAACK,GAAG,CAACF,IAAI,EAAEE,GAAG,CAAC;MAC9B,IAAI,CAACH,UAAU,CAACG,GAAG,CAACA,GAAG,EAAE,CAACF,IAAI,CAAC,CAAC;MAEhC,IAAIA,IAAI,CAACI,KAAK,EAAE,IAAI,CAACR,SAAS,CAACS,IAAI,CAAC,CAACL,IAAI,EAAEA,IAAI,CAACI,KAAK,CAAC,CAAC;MACvD,IAAIJ,IAAI,CAACM,IAAI,EAAE,IAAI,CAACV,SAAS,CAACS,IAAI,CAAC,CAACL,IAAI,EAAEA,IAAI,CAACM,IAAI,CAAC,CAAC;IACvD;EACF;EAEAC,QAAQ,CAACC,IAAI,EAAEC,KAAK,EAAE;IACpB,OAAO,IAAI,CAACZ,UAAU,CAACa,GAAG,CAACF,IAAI,CAAC,KAAK,IAAI,CAACX,UAAU,CAACa,GAAG,CAACD,KAAK,CAAC;EACjE;EAEAE,KAAK,CAACH,IAAI,EAAEC,KAAK,EAAE;IACjBD,IAAI,CAACI,IAAI,CAACH,KAAK,CAAC;IAEhB,MAAMI,MAAM,GAAG,IAAI,CAAChB,UAAU,CAACa,GAAG,CAACF,IAAI,CAAC;IACxC,MAAMM,KAAK,GAAG,IAAI,CAACjB,UAAU,CAACa,GAAG,CAACD,KAAK,CAAC;IACxC,MAAMM,MAAM,GAAG,IAAI,CAAChB,UAAU,CAACW,GAAG,CAACI,KAAK,CAAC,IAAI,CAACL,KAAK,CAAC;IAEpD,KAAK,MAAMT,IAAI,IAAIe,MAAM,EAAE;MACzB,IAAI,CAAChB,UAAU,CAACW,GAAG,CAACG,MAAM,CAAC,CAACR,IAAI,CAACL,IAAI,CAAC;MACtC,IAAI,CAACH,UAAU,CAACK,GAAG,CAACF,IAAI,EAAEa,MAAM,CAAC;IACnC;IAEA,IAAI,CAACd,UAAU,CAACiB,MAAM,CAACF,KAAK,CAAC;EAC/B;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}